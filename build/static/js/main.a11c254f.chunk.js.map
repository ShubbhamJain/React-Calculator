{"version":3,"sources":["App.js","components/Buttons.js","components/Display.js","serviceWorker.js","index.js"],"names":["calButtons","id","value","currentNumber","currentOperator","prevOperator","App","props","state","exp","currentVal","result","display","isDecimal","clrDisplay","bind","delValue","handleClick","solve","handleDecimal","this","setState","substring","length","slice","btn","test","current","includes","push","formula","join","answer","Math","round","eval","isNaN","e","target","calBtn","map","item","key","name","className","onClick","React","Component","Buttons","Display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a11c254f.chunk.js","sourcesContent":["import React from \"react\";\nimport Buttons from \"./components/Buttons\";\nimport Display from \"./components/Display\";\nimport \"./App.css\";\n\nconst calButtons = [\n  {\n    id: \"divide\",\n    value: \"/\",\n  },\n  {\n    id: \"seven\",\n    value: 7,\n  },\n  {\n    id: \"eight\",\n    value: 8,\n  },\n  {\n    id: \"nine\",\n    value: 9,\n  },\n  {\n    id: \"multiply\",\n    value: \"x\",\n  },\n  {\n    id: \"four\",\n    value: 4,\n  },\n  {\n    id: \"five\",\n    value: 5,\n  },\n  {\n    id: \"six\",\n    value: 6,\n  },\n  {\n    id: \"subtract\",\n    value: \"-\",\n  },\n  {\n    id: \"three\",\n    value: 3,\n  },\n  {\n    id: \"two\",\n    value: 2,\n  },\n  {\n    id: \"one\",\n    value: 1,\n  },\n  {\n    id: \"add\",\n    value: \"+\",\n  },\n  {\n    id: \"zero\",\n    value: 0,\n  },\n];\n\nlet currentNumber = \"\";\n\nlet currentOperator = \"+\";\n\nlet prevOperator = \"+\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      exp: [],\n      currentVal: \"\",\n      result: 0,\n      display: 0,\n      isDecimal: false,\n    };\n\n    this.clrDisplay = this.clrDisplay.bind(this);\n\n    this.delValue = this.delValue.bind(this);\n\n    this.handleClick = this.handleClick.bind(this);\n\n    this.solve = this.solve.bind(this);\n\n    this.handleDecimal = this.handleDecimal.bind(this);\n  }\n\n  clrDisplay() {\n    currentNumber = \"\";\n    this.setState({\n      exp: [],\n      currentVal: \"\",\n      result: \"\",\n      display: 0,\n      isDecimal: false,\n    });\n  }\n\n  delValue() {\n    currentNumber = currentNumber.substring(0, currentNumber.length - 1);\n    this.setState({\n      exp: this.state.exp.slice(0, -1),\n      display: this.state.exp.slice(0, -1),\n      currentVal: \"\",\n    });\n  }\n\n  handleClick(btn) {\n    if (this.state.exp.length === 0) {\n      currentNumber = \"\";\n      this.setState({\n        isDecimal: false,\n        result: 0,\n      });\n    }\n    let currentNum = \"\";\n    if (btn === \"x\") {\n      btn = \"*\";\n    }\n    if (!/[+-/*]/.test(btn)) {\n      currentNum = btn;\n      currentNumber += currentNum;\n    } else if (btn === \".\") {\n      currentNum = btn;\n      currentNumber += currentNum;\n      this.setState({\n        isDecimal: true,\n      });\n    } else {\n      currentNum = \"\";\n      currentNumber = \"\";\n      this.setState({\n        isDecimal: false,\n      });\n    }\n    let current = \"\";\n    if (this.state.exp.includes(0) && this.state.exp[0] === 0 && btn === 0) {\n      btn = \"\";\n    }\n\n    if (btn === \"+\" || btn === \"-\" || btn === \"*\" || btn === \"/\") {\n      prevOperator = currentOperator;\n      if (prevOperator === btn || currentOperator === btn) {\n        btn = \"\";\n      } else {\n        currentOperator = btn;\n      }\n    }\n\n    current = btn;\n    this.state.exp.push(current);\n    this.setState({\n      display: this.state.exp,\n      currentVal: currentNumber,\n    });\n  }\n\n  solve() {\n    let formula = this.state.exp.join(\"\");\n    while (/[+-/*]$/.test(formula)) {\n      formula = formula.slice(0, -1);\n    }\n    while (/^[+-/*]/.test(formula)) {\n      formula = formula.substring(1, formula.length);\n    }\n    if (formula === \"5*-+5\") {\n      formula = \"5+5\";\n    }\n    let answer =\n      // eslint-disable-next-line no-eval\n      Math.round(1000000000000 * eval(formula)) / 1000000000000;\n\n    currentNumber = \"\" + answer;\n    if (isNaN(answer)) {\n      answer = 0;\n    }\n    if (currentNumber.includes(\".\")) {\n      this.setState({\n        isDecimal: true,\n      });\n    } else {\n      this.setState({\n        isDecimal: false,\n      });\n    }\n    this.setState({\n      result: answer,\n      display: answer,\n      exp: [answer],\n      currentVal: \"\" + answer,\n    });\n    currentOperator = \"\";\n    prevOperator = \"\";\n  }\n\n  handleDecimal(e) {\n    if (!currentNumber.includes(\".\")) {\n      if (!this.state.isDecimal) {\n        this.handleClick(e.target.value);\n      }\n    } else {\n      this.setState({\n        isDecimal: true,\n      });\n    }\n  }\n\n  render() {\n    const calBtn = calButtons.map((item) => {\n      return (\n        <Buttons\n          id={item.id}\n          key={item.id}\n          value={item.value}\n          name={item.value}\n          handleClick={this.handleClick}\n        />\n      );\n    });\n    return (\n      <div className=\"App\">\n        <h1>Calculator</h1>\n        <div id=\"calculator\">\n          <Display display={this.state.display} />\n\n          <div id=\"actions\">\n            <button id=\"clear\" onClick={this.clrDisplay}>\n              AC\n            </button>\n\n            <button id=\"delete\" onClick={this.delValue}>\n              Delete\n            </button>\n\n            {calBtn}\n\n            <button id=\"decimal\" onClick={this.handleDecimal} value=\".\">\n              .\n            </button>\n\n            <button id=\"equals\" onClick={this.solve}>\n              =\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\nclass Buttons extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.handleClick(this.props.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"btn\"\r\n        id={this.props.id}\r\n        key={this.props.id}\r\n        value={this.props.value}\r\n        onClick={this.handleClick}\r\n      >\r\n        {this.props.value}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\n\r\nclass Display extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"display\" className=\"display\">\r\n        <p>{this.props.display}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Display;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}